{% raw -%}
name: Release

on: 
  release:
    types: published

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: "https://registry.npmjs.org"

      - name: Cache esy dependencies
        uses: actions/cache@v1
        id: cache
        with:
          path: _export
          key: ${{ runner.OS }}-build-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install esy
        run: npm install -g esy@latest

      - name: Import dependencies
        if: steps.cache.outputs.cache-hit == 'true'
        run: esy import-build _export/*

      - name: Install dependencies
        run: esy install

      - name: Build
        run: esy build --release

      - name: Substitute watermarks
        run: esy dune subst

      - name: Build changes
        run: esy dune build

      - name: Run tests
        run: esy test

      - name: Export dependencies
        run: esy export-dependencies

      - name: Get Esy binary path
        id: esy_binary_path
        shell: bash
        run: |
          # from https://stackoverflow.com/a/24848739/617787
          s=$(pwd); d=$(dirname $(esy x which {% endraw %}{{ project_slug }}{% raw %}));
          while [ "${d#$s/}" == "${d}" ]
          do s=$(dirname $s);b="../${b}"; done; 
          ESY__BINARY_PATH=${b}${d#$s/}/{% endraw %}{{ project_slug }}{% raw %}
          echo "ESY__BINARY_PATH: $ESY__BINARY_PATH"
          echo "##[set-output name=path;]$ESY__BINARY_PATH"

      - name: Upload artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: ${{ steps.esy_binary_path.outputs.path }}

  publish:
    needs: build
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Cache esy dependencies
        uses: actions/cache@v1
        id: cache
        with:
          path: _export
          key: ${{ runner.OS }}-build-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install esy
        run: npm install -g esy@latest

      - name: Import dependencies
        if: steps.cache.outputs.cache-hit == 'true'
        run: esy import-build _export/*

      - name: Install dependencies
        run: esy install

      - name: Build
        run: esy build --release

      - name: Substitute watermarks
        run: esy dune subst

      - name: Make NPM release skeleton
        run: node script/release-make-skeleton.js

      - name: Download linux artifacts
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: _release/platform-linux-x64

      - name: Download macOS artifacts
        uses: actions/download-artifact@master
        with:
          name: macos-latest
          path: _release/platform-darwin-x64

      - name: Download windows artifacts
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: _release/platform-windows-x64

      - name: Create archives for Github release
        run: |
          cd _release/platform-darwin-x64
          zip -r ../../{% endraw %}{{ project_slug }}{% raw %}-darwin-x64.zip .
          cd ../..

          cd _release/platform-linux-x64
          zip -r ../../{% endraw %}{{ project_slug }}{% raw %}-linux-x64.zip .
          cd ../..

          # cd _release/platform-windows-x64
          # zip -r ../../{% endraw %}{{ project_slug }}{% raw %}-windows-x64.zip .
          # cd ../..

      - name: Upload {% endraw %}{{ project_slug }}{% raw %}-darwin-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: {% endraw %}{{ project_slug }}{% raw %}-darwin-x64.zip
          asset_name: {% endraw %}{{ project_slug }}{% raw %}-darwin-x64.zip
          asset_content_type: application/gzip

      - name: Upload {% endraw %}{{ project_slug }}{% raw %}-linux-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: {% endraw %}{{ project_slug }}{% raw %}-linux-x64.zip
          asset_name: {% endraw %}{{ project_slug }}{% raw %}-linux-x64.zip
          asset_content_type: application/gzip

      - name: Upload {% endraw %}{{ project_slug }}{% raw %}-windows-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: {% endraw %}{{ project_slug }}{% raw %}-windows-x64.zip
          asset_name: {% endraw %}{{ project_slug }}{% raw %}-windows-x64.zip
          asset_content_type: application/gzip

      - name: Publish NPM package
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "@{{ npm_username }}"
          npm config list
          npm publish --access public
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
{% endraw %}